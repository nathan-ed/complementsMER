%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.5 (assemblage 23F79) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 253 326
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 253 326
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GBDGAU+ArialMT
%!FontType1-1.0: GBDGAU+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin
/FontName /GBDGAU+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /a put
dup 34 /A put
dup 35 /b put
dup 36 /c put
dup 37 /d put
dup 38 /e put
dup 39 /B put
dup 40 /C put
dup 41 /D put
dup 42 /E put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<



592D2C4B5258B00425B0042549B00425B00425496120B0005458212043B0005558B00325B00325B8FFC038B8FFC038591BB04054582043B0005458B00225B8FFC038591B2043B0005458B00325B00325B8FFC038B8FFC0381BB00325B8FFC03859595959212121212D2C462346608A8A462320468A608A61B8FF8062232010238AB902C202C28A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A2D2CB1020042B123018851B1400188535A58B910000020885458B202010243604259592D2CB0024354584B53234B515A58381B2121591B21212121592D000000020100000005000500000300070000211121112521112101000400FC2003C0FC400500FB002004C0000002FFFD0000055905BA0007000E0167B6010E0F10025502B8FFF2B40F10025502B8FFF8B40D0D065502B8FFF440590C0C0655090C0C0C0655050C0C0C06552F10301067086809601088039010C905C606C010F0100B0805590156025010680BB010F30CF30DF30E09040C040D040E030B0A090504040C0D0E080607070C09050408060C07010000B8FFF8400F0C0C02550020070C1407070C020303B8FFF840150C0C02550320040C1404040C091E0505081E060306B80270400900080CE94002010202BA010B0001010B40120C2000650703525004CF04DF040390040104B80101400B500CC007DF0C03900C010CB8010140100F07CF07027F0780070207930FD6D7182B10F45D7119F45D71F45D7118ED10ED1A1910EDED00183F3C1AED3FE43C10ED3C10ED87052E2B2B7D10C4872E182B2B7D10C401111239391139398710C4C40EC4C4870510C4C40EC4C43130014BB00B534BB01E515A58B4040F030807BAFFF00000FFF838383838590172715D2B2B2B2B2B2B230133012303210313210326270607030233D10258DDABFD9BA1D901F19946221C3305BAFA4601BCFE44025A0196B9778D8B0000030096000004E905BA0011001D002A0113B90004FFF440470B0B065504044623562366237309840906691A75057009730B8305830B062716090318272A1E161D090913121E2A2A2929001C1D1E0201021F1E1E1100081826060C1010025506B8FFE640330F0F025506120D0D025506060C0C025506080B0B0655060C0C0C065506140D0D0655065425260C1C101002550C0A0D0D02550CB8FFF440150B0B06550C1A2C1D1E200120000100201010025500B8FFF6B40F0F025500B8FFF6B40D0D025500B8FFFAB40C0C025500B8FFFAB40C0C065500B8FFF0400A0D0D0655005D2B3B5C182B10F62B2B2B2B2B2B5D3CFD3C4E10F62B2B2B4DEDF42B2B2B2B2B2B2BED003F3CFD3C3F3CFD3C12392F3C10FD3C392F1139111239011217393130015D005D2B33112132161615140607161615140E0223012132373636353426262321112132373E0235342626





001F0135001C0801001F0134001C02AB001F0132B21C561FB8010FB2262C1FBA010E001E0401B61FF91CE41FE91CB80201B61FE81CBB1FD720B80401B21FD51CB802ABB61FD41C891FC92FB80801B21FBC26B80101B21FBA20B80201B61FB91C381FADCAB80401B21F8126B8019AB21F7E26B8019AB61F7D1C471F6B1CB80401B21F6526B8019AB21F5E73B80401400F1F52265A1F481C891F441C621F4073B80801B61F3F1C5E1F3C26B8019AB21F351CB80401B61F301CBB1F2B1CB80401B61F2A1C561F291CB80101B21F231EB80401B21F5537B80168402C07960758074F07360732072C0721071F071D071B071408120810080E080C080A080808060804080208000814B8FFE0402B00000100140610000001000604000001000410000001001002000001000200000001000002010802004A00B013034B024B5342014BB0C063004B6220B0F65323B8010A515AB005234201B0124B004B5442B0382B4BB807FF52B0372B4BB007505B58B101018E59B0382BB00288B801005458B801FFB101018E851BB0124358B900010111858D1BB900010128858D5959001816763F183F123E113946443E113946443E113946443E113946443E11394660443E11394660442B2B2B2B2B2B2B2B2B2B2B182B2B2B2B2B2B2B2B2B2B2B182B1DB0964B5358B0AA1D59B0324B5358B0FF1D594BB09353205C58B901F201F04544B901F101F045445958B9033E01F2455258B901F2033E4459594BB8015653205C58B9002001F14544B9002601F145445958B9081E0020455258B90020081E4459594BB8019A53205C58B9002501F24544B9002401F245445958B909090025455258B9002509094459594BB8040153205C58B173244544B1242445445958B917200073455258B9007317204459594BB8040153205C58B1CA254544B1252545445958B9168000CA455258B900CA16804459594BB03E53205C58B11C1C4544B11E1C45445958B9011A001C455258B9001C011A4459594BB05653205C58B11C1C4544B12F1C45445958B90189001C455258B9001C01894459594BB8030153205C58B11C1C4544B11C1C45445958B90DE0001C455258B9001C0DE04459592B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B2B65422B2B01B33B59635C456523456023456560234560B08B766818B080622020B163594565234520B003266062636820B003266165B059236544B063234420B13B5C4565234520B003266062636820B003266165B05C236544B03B2344B1005C455458B15C406544B23B403B4523614459B347503437456523456023456560234560B089766818B080622020B134504565234520B003266062636820B003266165B050236544B034234420B147374565234520B003266062636820B0032661

00>] def
/CharStrings 11 dict dup begin
/.notdef 0 def
/A 1 def
/B 2 def
/C 3 def
/D 4 def
/E 5 def
/a 6 def
/b 7 def
/c 8 def
/d 9 def
/e 10 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1361 -665 4096 2060} readonly def
/UniqueID 4167158 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB282915F131C0C1972474AA95A3C190204D99DA4DD48BE293602C24D34CF88082F3DB6E6E8EED3012E76A7B5891CBDCF281A81EE320CAE3583D1DD26C958A678539822B611511B90A7FDB53F28DF2FF26CC67E33148306B181482F04F0208B9C1E574F29196A23FA11EE7B1EF2427F54839AE059693DF0E202362A7BBB17D5AB26DF897DFD53D3CBF579CEC69D21F0E8071C6B23156286E1D3F611327E5A802D101AD506A366FD07A1F70B87256C86C2247FBD1B09397C0E57882498D4C14AE308C15575D04AA58CBC65224AF2FA1F8CBFDE4BAA8DE6A733AF76329D75D30B0948AE3043C7161A591D703FE2A3B83E33A073832AAD90121BB09436E041608BD0DFDA14740BCC47F8A8E58281ED571E292FF2553CBAA914006A9678C8696A995D596580041F44636610638FA99119F1EE20DB9E5414467EEC67D9D992C1189B554A58932843FF193DC30E917F14BE112723D415FC8FBB56B4D6B9F381CBBBFCBCA1CE5356A9381CCF8F1B3372DDBA708A3CB08119C7DC65A6CA513ABA2336A39870969B232AE3C68271ECF2E167274029B3D9BE7A5E8EBFC4D9F5FD6AF656132B1C5605447B8CDDEFDE56528B5C678BB5F86E213EDDC238B332377856322F57C8F711C0583869D2D7F28ACE5EA3ECA8274D6C75329CB24E0E43E29F1861894D0A8E10FA86A7CD646A95B1E251F07CC5E7F394A0B17ED831EBADB0A76A690962192FFBB1D3A1AFD5CBA3ABC2DAD2AF00DE39BE079C17249E6AA64E03738633DD8AE167A68BE1
2C91E591E025DF89B3B739626959EFA7DF08E8365E2E3E80B00EC9C35674B133546BDFC5BFFC9328809660EA3A8963B00D4C6EDFDB6D3A1509A2133B0E8FC5A90DE675639A07358EA18E75EC4C68825206796B05CF001946870E759B419AA3234874B0F28536788D1861E74A2FA2D2377E92FBD98E087618DA73762BC38296BE966B0A8031E4E717874DD162248503C100C4273BA15EFAC858FE5C2E615794DCF3BD0D5370EB9F8614F4585038054EED5CE26A119152B4D07FD6A6C5AA5C498B7D79685354D4198B1645370C24DE67D5AD295D9BEBE1F86CE8F2CF0ED83B027000A60256B88E5056030AAFBA2BD3DB07431C3335D0B00E77717FD14B6A4FBFC7C9A0BF510FD9E416D456BA2A69AB06B4EBF8C38CC9959C72ACA8DC2737680C429AC7A2FA4997075FA0CCE123B348BC360874096425F7D669C5ABB7E944A35AA2409520D59B51906DB04C8D6A0C10E107D925F4CC40EFD14680A5B60C451AF542E8DB6C86DA9E98116CDC8DBA7B8940EE5CC7223AA382CD632EA95EA25783F87F1C529BA712A36D89B09572EF2BF9C3C632C0A8BD3A40FBBB634502F8BCFBF860C88B91D3619A456DACD7D105B89DA644F96649215B93C1F40B0E78D82C55440BEFD88F3DC2E86D402843A82A1E087B59755B906C4ABD345EE8D3E48842EA3866A9731C0B58AA49622B2C48BA3419F23A52145A61C3DF7AA1C9E1B5A8FEA957C47837471EF61B537156A3D926CE509ECB3123E7BBAB76A73D80C01A98E98CD3BEF287073C0B69A0EB4F31A07B2F0903E904986319AEC4647F3F963E9391463B1AAAEEC53815854D35A65CA00DC4C0A848B755455FDCA24CC88C4B451A2B8041286B3321F9C397840811AEF7FFF892CB178EC9898353CB4610D4DD55B9B3A52DAD45FD8A7284B99906267B181D2D7AA9A5E15B21DE88295F957753D9929E8D0EFB8FE9B09B0F70D8F364BF936C94B4361A5F665567FBEEB7862562906B02F187A5C464A147672B222A6BB9CC55102844A1F4931D50B35F4CCD39204015109161812DE26CD631617DA1237AD41B15C33761315421354591EF5C3A9C38FE1FA054570A6BD3C0CF54466A1FE60B0913480F0C64D207E25C26EE657BE039EBB9CC8E940861913BC80AA0EEAD3ED5962AAFB5268B5AE06DD09ED3E4A14B74A234FCAE161F01A02FF3D9BFA549490756CA274DD20B59814174ED5EA690E3F562ED51CE70CAE3F41C89E0E6A65B8E719E40366E42A34E531550EF82495B78A96460558D1C9F86CE5F697A1312332CBD9A0BF25F5437C208E6FEF8F78F9DAB81B61D95584ABC1BB3960C8553BFE241634ABABB47F92081BADD1A6694037F29ACE82E067C211E36A282D0402DF4546B19834EF74AE027840E9EE01797554B88FAB3623B2EAAC1836064417EADB995243C745B26A777D9A7A55964CAF3543C7067E09F3117F2
5048E709B18E41F89563C5232A853A0A852BB64E1A184DB23FED59370EC25419D1455E25C96431B35343A4A0DCC12D1BAA5682891219559D15F7863AE2C23A31A8A91D45B6077F1E3F2B0BD9FC67A5728507C07BD73B3977913A2DFB9F87011CB8DEB0C100529E1A9716F9B111D29D0A72E9919BFD8598AC6327CDF3E7CC98DE7D9A1228BFB1BBAA40A5F1139287F177FFA9322591C2F5C321678AC2F07CDEEBAE0F78AF041A4614A47576844D4DBBC47994C0A4ABA2759FCF50BFA9184024B1CEF8BAB6CEA8DBE023B016482D37D99F367C7422F13FCF69FA07367170C7DF4F9A6B406F6554CEFF36EFB26514C82A5D73CDDEC642FF4B25CF49DAB8821EA65625CED9F934E23E91A5A7878B8A8D4D9DF72ED96D90592F647F5313F8FC5FD1702CAFB95768A77BF7858A4F2F7798EB512927872CEE7E9A0D34604B83C4E93C77EF2E090D6456A3DEC16D32131185405A1EDEEDD50465F7299DCFB6036491B6BEC4686E559555E9938EF9E1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/GBDGAU+ArialMT cguidfix
/F1.1/GBDGAU+ArialMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
2 J
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 253 325.51422 rc
1 0 0 -1 -179.5 558.75708 cm
288 270 m
342 270 l
342 558.13312 l
288 558.13312 l
h
288 270 m
S
342 270 m
306 234 l
S
288 270 m
252 234 l
S
252 234 m
306 234 l
S
252 234 m
252 522 l
S
234 288 m
270 288 l
S
180 270 m
216 270 l
216 306 l
180 306 l
h
180 270 m
S
0 i
/F1.1[ 12 0 0 -12 0 0]sf
194.81308 291.80371 m
(!)s
0.60000002 i
342 288 m
369.98245 288 l
S
CM
198.5 270.75711 m
190.98245 268.02094 l
190.98245 273.49326 l
h
198.5 270.75711 m
f
0.25 w
1 0 0 -1 -179.5 558.75708 cm
378 288 m
370.48245 290.73618 l
370.48245 285.26382 l
h
378 288 m
S
1 w
396 270 m
432 270 l
432 306 l
396 306 l
h
396 270 m
S
0 i
410.14804 291.80371 m
(")s
0.60000002 i
234 342 m
270 342 l
S
180 324 m
216 324 l
216 360 l
180 360 l
h
180 324 m
S
0 i
194.81308 345.80371 m
(#)s
0.60000002 i
234 396 m
270 396 l
S
180 378 m
216 378 l
216 414 l
180 414 l
h
180 378 m
S
0 i
195.14999 399.80371 m
($)s
0.60000002 i
180 432 m
216 432 l
216 468 l
180 468 l
h
180 432 m
S
0 i
194.81308 453.80371 m
(%)s
0.60000002 i
180 486 m
216 486 l
216 522 l
180 522 l
h
180 486 m
S
0 i
194.81308 507.80371 m
(&)s
0.60000002 i
234 450 m
270 450 l
S
234 504 m
270 504 l
S
288 558 m
252 522 l
S
342 342 m
369.98245 342 l
S
CM
198.5 216.75711 m
190.98245 214.02095 l
190.98245 219.49327 l
h
198.5 216.75711 m
f
0.25 w
1 0 0 -1 -179.5 558.75708 cm
378 342 m
370.48245 344.73618 l
370.48245 339.26382 l
h
378 342 m
S
1 w
396 324 m
432 324 l
432 360 l
396 360 l
h
396 324 m
S
0 i
410.14804 345.80371 m
(')s
0.60000002 i
396 378 m
432 378 l
432 414 l
396 414 l
h
396 378 m
S
0 i
409.81699 399.80371 m
(\()s
0.60000002 i
396 432 m
432 432 l
432 468 l
396 468 l
h
396 432 m
S
0 i
409.81699 453.80371 m
(\))s
0.60000002 i
396 486 m
432 486 l
432 522 l
396 522 l
h
396 486 m
S
0 i
410.14804 507.80371 m
(*)s
0.60000002 i
342 396 m
369.98245 396 l
S
CM
198.5 162.75711 m
190.98245 160.02095 l
190.98245 165.49327 l
h
198.5 162.75711 m
f
0.25 w
1 0 0 -1 -179.5 558.75708 cm
378 396 m
370.48245 398.73618 l
370.48245 393.26382 l
h
378 396 m
S
1 w
342 450 m
369.98245 450 l
S
CM
198.5 108.75711 m
190.98245 106.02094 l
190.98245 111.49327 l
h
198.5 108.75711 m
f
0.25 w
1 0 0 -1 -179.5 558.75708 cm
378 450 m
370.48245 452.73618 l
370.48245 447.26382 l
h
378 450 m
S
1 w
342 504 m
369.98245 504 l
S
CM
198.5 54.757107 m
190.98245 52.020947 l
190.98245 57.493267 l
h
198.5 54.757107 m
f
0.25 w
1 0 0 -1 -179.5 558.75708 cm
378 504 m
370.48245 506.73618 l
370.48245 501.26382 l
h
378 504 m
S
ep
end
%%Trailer
%%EOF
